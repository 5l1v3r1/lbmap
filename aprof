#!/usr/bin/perl
# Apache profiler PoC script
# Written by Eldar "WIreghoul" Marcussen - http://www.justanotherhacker.com

use strict;
use warnings;
use IO::Socket::INET;
use IO::Socket::SSL;
use Getopt::Long;

my $VERSION = '0.1';
my $AUTHOR = 'Eldar "Wireghoul" Marcussen';
my ($ssl, $target, $timeout, $sock);
my $port = 80;

my $opts = GetOptions(
        "ssl" => \$ssl,
        "port=i" => \$port,
        "timeout" => \$timeout,
        "version" => sub { print "aprof version: $VERSION\n"; exit 0; }
);

&show_help unless $ARGV[0];
$target = $ARGV[0];
&banner;

# General stuff here
print "Analysing: $target\n";
my $tmp = &check_is_apache;
if (!$tmp) {
    print "Server does not appear to be apache\n";
    exit;
}
print "Server signature: Apache$tmp\n";

# Module detection here
print "Attempting to identify modules:\n";
&check_default_host;
&check_mod_alias;
&check_mod_cgi;
&check_mod_deflate;
&check_mod_info;
&check_mod_php;
&check_mod_status;

print "Done!\n\n";

sub check_is_apache {
    if ( &request("GET / HTTP/1.1\r\nHost: $target") =~ m{^Server: Apache(.*)$}m ) {
        return $1;
    }
}

sub check_default_host {
    return;
}

sub check_mod_alias {
    return;
}

sub check_mod_php {
    if ( &request("GET / HTTP/1.1\r\nHost: $target") =~ m{^(X-Powered-By: PHP|Set-Cookie: PHPSESSID|Server: .* PHP/)}m ) {
        print "mod_php detected\n";
        return 1;
    }
    if ( &request("GETSPHP /index.php HTTP/1.1\r\nHost: $target") =~ m{^HTTP/1.. (200|30[12]|404|500)} && &request("GETSPHP /notaphp.file HTTP/1.1\r\nHost: $target") =~ m{^HTTP/1.. 501} ) {
        print "mod_php detected\n";
    }
}

sub check_mod_cgi {
    if ( &request("GETCGI /cgi-bin/ HTTP/1.1\r\nHost: $target") =~ m{^HTTP/1.. (200|30[12]|403|500)} && &request("GETCGI /notacgi.gob HTTP/1.1\r\nHost: $target") =~ m{^HTTP/1.. 501} ) {
        print "mod_cgi detected\n";
    }
}

sub check_mod_deflate {
    return;
}

sub check_mod_info {
    my $response = &request("GET /server-info/ HTTP/1.1\r\nHost: $target");
    if ( $response =~ m{^HTTP/1.. 403} ) {
        print "mod_info (restricted access) detected\n";
    } elsif ( $response =~ m{Apache Server Information} ) {
        print "mod_info (public access) detected\n"; #Should be parsed for 100% accurate information
    }
}

sub check_mod_status {
    my $response = &request("GET /server-status/ HTTP/1.1\r\nHost: $target");
    if ( $response =~ m{^HTTP/1.. 403} ) { 
        print "mod_status (restricted access) detected\n";
    } elsif ( $response =~ m{Apache Status} ) {
        print "mod_status (public access) detected\n";
    }
}

sub check_mod_setenv {
    return;
}

sub request {
# Need timeout
    my $request = shift;
    my $resp = '';
    if (&connect($target, $port, $timeout)) {
        print $sock "$request\r\nConnection: Close\r\n\r\n";
        while (<$sock>) {
            $resp .= $_;
        }
    }
#    warn "DEBUG:\n".$resp;
    return $resp;
}

sub connect {
    my ($target, $port, $timout) = @_;
    if ($ssl) {
	$sock = IO::Socket::SSL->new("$target:$port") or die "Unable to connect to $target: $!\n";
    } else {
        $sock = IO::Socket::INET->new("$target:$port") or die "Unable to connect to $target: $!\n";
    }
    # Reconnect attempts?
    return 1 if ($sock);
}
       
sub show_help {
    &banner;
    print "Usage: $0 <hostname>\n";
    exit;
}

sub banner {
    print "aprof - Apache profiler script v $VERSION\n";
    print "Written by $AUTHOR - http://www.justanotherhacker.com\n";
}
